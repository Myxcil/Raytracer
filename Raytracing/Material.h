#pragma once

//----------------------------------------------------------------------------------------------------------------------------------------
struct HitInfo;
class Texture;

//----------------------------------------------------------------------------------------------------------------------------------------
#include "PDF.h"

//----------------------------------------------------------------------------------------------------------------------------------------
struct ScatterInfo
{
	Vector3		specularRay;
	bool		isSpecular;
	Color		attenuation;
	CosinePDF	cosinePDF;
};

//----------------------------------------------------------------------------------------------------------------------------------------
class Material
{
public:
	//------------------------------------------------------------------------------------------------------------------------------------
	virtual ~Material();

	//------------------------------------------------------------------------------------------------------------------------------------
	void					AddRef()			{ ++numRefs; }
	void					Release();

	//------------------------------------------------------------------------------------------------------------------------------------
	virtual Color			Emitted(const Ray& _ray, const HitInfo& _hitInfo) const { return Color(0, 0, 0); }
	virtual bool			Scatter(const Ray& _ray, const HitInfo& _hitInfo, ScatterInfo& _scatterInfo) const { return false;}
	virtual Vector3::Type	ScatteringPDF(const Ray& _ray, const HitInfo& _hitInfo, const Ray& _scattered) const { return 0; }

	virtual bool			IsEmissive() const { return false; }

protected:
	//------------------------------------------------------------------------------------------------------------------------------------
	Material(const Texture* _albedo);
	Color					SampleAlbedo(const HitInfo& _hitInfo) const;

private:
	//------------------------------------------------------------------------------------------------------------------------------------
	int				numRefs;
	const Texture*	albedo;
};

//----------------------------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------------------------
class LambertMaterial : public Material
{
public:
	//------------------------------------------------------------------------------------------------------------------------------------
	LambertMaterial(const Texture* _albedo);
	bool					Scatter(const Ray& _ray, const HitInfo& _hitInfo, ScatterInfo& _scatterInfo) const override;
	Vector3::Type			ScatteringPDF(const Ray& _ray, const HitInfo& _hitInfo, const Ray& _scattered) const override;
};

/*
//----------------------------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------------------------
class MetalMaterial : public Material
{
public:
	//------------------------------------------------------------------------------------------------------------------------------------
	MetalMaterial(const Texture* _albedo, Vector3::Type _fuzziness);
	bool			Scatter(const Ray& _ray, const HitInfo& _hitInfo, Vector3& _attenuation, Ray& _scattered) const override;

private:
	//------------------------------------------------------------------------------------------------------------------------------------
	Vector3::Type	fuzziness;
};

//----------------------------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------------------------
class DielectricMaterial : public Material
{
public:
	//------------------------------------------------------------------------------------------------------------------------------------
	DielectricMaterial(Vector3::Type _refractionIndex);
	bool			Scatter(const Ray& _ray, const HitInfo& _hitInfo, Vector3& _attenuation, Ray& _scattered) const override;

private:
	//------------------------------------------------------------------------------------------------------------------------------------
	static Vector3::Type	CalcReflectance(Vector3::Type _cosine, Vector3::Type _refractionIndex);

private:
	//------------------------------------------------------------------------------------------------------------------------------------
	Vector3::Type	refractionIndex;
};
*/

//----------------------------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------------------------
class DiffuseLight : public Material
{
public:
	//------------------------------------------------------------------------------------------------------------------------------------
	DiffuseLight(const Color& _emit);

	//------------------------------------------------------------------------------------------------------------------------------------
	Color			Emitted(const Ray& _ray, const HitInfo& _hitInfo) const override { return _hitInfo.frontFace ? emit : Color(0,0,0); }

	//------------------------------------------------------------------------------------------------------------------------------------
	bool			IsEmissive() const override { return true; }

private:
	//------------------------------------------------------------------------------------------------------------------------------------
	Color	emit;
};
