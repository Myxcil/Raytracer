#pragma once

//----------------------------------------------------------------------------------------------------------------------------------------
struct HitInfo;

//----------------------------------------------------------------------------------------------------------------------------------------
class Material
{
public:
	//------------------------------------------------------------------------------------------------------------------------------------
	virtual ~Material();

	//------------------------------------------------------------------------------------------------------------------------------------
	void			AddRef()			{ ++numRefs; }
	void			Release();

	//------------------------------------------------------------------------------------------------------------------------------------
	virtual bool	Scatter(const Ray& _ray, const HitInfo& _hitInfo, Vector3& _attenuation, Ray& _scattered) const = 0;
	virtual void	Emitted(const Vector3& _uvw, const Vector3& _point, Color& _color) const { _color = Color(0,0,0); }

protected:
	//------------------------------------------------------------------------------------------------------------------------------------
	Material(const Color& _albedo);

protected:
	//------------------------------------------------------------------------------------------------------------------------------------
	Color			albedo;

private:
	//------------------------------------------------------------------------------------------------------------------------------------
	int				numRefs;
};

//----------------------------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------------------------
class LambertMaterial : public Material
{
public:
	//------------------------------------------------------------------------------------------------------------------------------------
	LambertMaterial(const Color& _albedo);
	bool			Scatter(const Ray& _ray, const HitInfo& _hitInfo, Vector3& _attenuation, Ray& _scattered) const override;
};

//----------------------------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------------------------
class MetalMaterial : public Material
{
public:
	//------------------------------------------------------------------------------------------------------------------------------------
	MetalMaterial(const Color& _albedo, Vector3::Type _fuzziness);
	bool			Scatter(const Ray& _ray, const HitInfo& _hitInfo, Vector3& _attenuation, Ray& _scattered) const override;

private:
	//------------------------------------------------------------------------------------------------------------------------------------
	Vector3::Type	fuzziness;
};

//----------------------------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------------------------
class DielectricMaterial : public Material
{
public:
	//------------------------------------------------------------------------------------------------------------------------------------
	DielectricMaterial(Vector3::Type _refractionIndex);
	bool			Scatter(const Ray& _ray, const HitInfo& _hitInfo, Vector3& _attenuation, Ray& _scattered) const override;

private:
	//------------------------------------------------------------------------------------------------------------------------------------
	static Vector3::Type	CalcReflectance(Vector3::Type _cosine, Vector3::Type _refractionIndex);

private:
	//------------------------------------------------------------------------------------------------------------------------------------
	Vector3::Type	refractionIndex;
};

//----------------------------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------------------------
class DiffuseLight : public Material
{
public:
	//------------------------------------------------------------------------------------------------------------------------------------
	DiffuseLight(const Color& _emit);

	//------------------------------------------------------------------------------------------------------------------------------------
	bool	Scatter(const Ray& _ray, const HitInfo& _hitInfo, Vector3& _attenuation, Ray& _scattered) const override { return false; }
	void	Emitted(const Vector3& _uvw, const Vector3& _point, Color& _color) const override { _color = emit; }

private:
	//------------------------------------------------------------------------------------------------------------------------------------
	Color	emit;
};