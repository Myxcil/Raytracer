#pragma once

//----------------------------------------------------------------------------------------------------------------------------------------
struct HitInfo;
class Texture;

//----------------------------------------------------------------------------------------------------------------------------------------
class Material
{
public:
	//------------------------------------------------------------------------------------------------------------------------------------
	virtual ~Material();

	//------------------------------------------------------------------------------------------------------------------------------------
	void			AddRef()			{ ++numRefs; }
	void			Release();

	//------------------------------------------------------------------------------------------------------------------------------------
	virtual bool	Scatter(HitInfo& _hitInfo) const	{ return false; }
	virtual double	PDF(const HitInfo& _hitInfo) const	{ return 0; }

	//------------------------------------------------------------------------------------------------------------------------------------
	virtual bool	IsImportant() const { return false; }
	virtual Color	Emitted(const HitInfo& _hitInfo) const { return Color(0,0,0); }

protected:
	//------------------------------------------------------------------------------------------------------------------------------------
	Material(const Texture* _albedo);
	Color			SampleAlbedo(const HitInfo& _hitInfo) const;

private:
	//------------------------------------------------------------------------------------------------------------------------------------
	int				numRefs;
	const Texture*	albedo;
};

//----------------------------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------------------------
class LambertMaterial : public Material
{
public:
	//------------------------------------------------------------------------------------------------------------------------------------
	LambertMaterial(const Texture* _albedo);
	bool			Scatter(HitInfo& _hitInfo) const override;
	double			PDF(const HitInfo& _hitInfo) const override;
};

//----------------------------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------------------------
class MetalMaterial : public Material
{
public:
	//------------------------------------------------------------------------------------------------------------------------------------
	MetalMaterial(const Texture* _albedo, double _fuzziness);
	bool			Scatter(HitInfo& _hitInfo) const;

private:
	//------------------------------------------------------------------------------------------------------------------------------------
	double	fuzziness;
};

//----------------------------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------------------------
class DielectricMaterial : public Material
{
public:
	//------------------------------------------------------------------------------------------------------------------------------------
	DielectricMaterial(double _refractionIndex);
	bool			Scatter(HitInfo& _hitInfo) const override;
	bool			IsImportant() const override						{ return true; }

private:
	//------------------------------------------------------------------------------------------------------------------------------------
	static double	CalcReflectance(double _cosine, double _refractionIndex);

private:
	//------------------------------------------------------------------------------------------------------------------------------------
	double	refractionIndex;
};

//----------------------------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------------------------
class DiffuseLight : public Material
{
public:
	//------------------------------------------------------------------------------------------------------------------------------------
	DiffuseLight(const Color& _emit, bool _visible = true);

	//------------------------------------------------------------------------------------------------------------------------------------
	bool			IsImportant() const override						{ return true; }
	Color			Emitted(const HitInfo& _point) const override		{ return emit; }

private:
	//------------------------------------------------------------------------------------------------------------------------------------
	Color	emit;
	bool	visible;
};