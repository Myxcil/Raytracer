#pragma once

#include "Objects/TraceableObject.h"

//----------------------------------------------------------------------------------------------------------------------------------------
class PDF
{
public:
	//------------------------------------------------------------------------------------------------------------------------------------
	virtual ~PDF() { }

	//------------------------------------------------------------------------------------------------------------------------------------
	virtual void			Set(const Vector3& _v) = 0;

	//------------------------------------------------------------------------------------------------------------------------------------
	virtual Vector3::Type	GetValue(const Vector3& _direction) const = 0;
	virtual Vector3			Generate() const = 0;
};

//----------------------------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------------------------
class CosinePDF : public PDF
{
public:
	//------------------------------------------------------------------------------------------------------------------------------------
	CosinePDF() 
	{
	}

	//------------------------------------------------------------------------------------------------------------------------------------
	void			Set(const Vector3& _v) override
	{
		onb.Set(_v);
	}

	//------------------------------------------------------------------------------------------------------------------------------------
	Vector3::Type	GetValue(const Vector3& _direction) const override
	{
		Vector3::Type cosine = Vector3::Dot(_direction, onb.forward);
		return cosine <= 0 ? 0 : cosine * M_1_PI;
	}

	//------------------------------------------------------------------------------------------------------------------------------------
	Vector3			Generate() const override
	{
		return onb.Transform(Helper::RandomCosineDirection());
	}

private:
	//------------------------------------------------------------------------------------------------------------------------------------
	ONB				onb;
};

//----------------------------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------------------------
class ObjectsPDF : public PDF
{
public:
	//------------------------------------------------------------------------------------------------------------------------------------
	ObjectsPDF(const TraceableObjects& _objects) : objects(_objects) { }

	//------------------------------------------------------------------------------------------------------------------------------------
	void			Set(const Vector3& _v) override
	{
		origin = _v;
	}

	//------------------------------------------------------------------------------------------------------------------------------------
	Vector3::Type	GetValue(const Vector3& _direction) const override
	{
		Vector3::Type sum = 0;
		for(size_t i = 0; i < objects.size(); ++i)
		{
			sum += objects[i]->CalcPDFValue(origin, _direction);
		}
		return sum / objects.size();
	}

	//------------------------------------------------------------------------------------------------------------------------------------
	Vector3			Generate() const override
	{
		int count = static_cast<int>(objects.size());
		return objects[Helper::RandomInt(0,count-1)]->GetRandomDirection(origin);
	}

private:
	//------------------------------------------------------------------------------------------------------------------------------------
	const TraceableObjects&	objects;
	Vector3					origin;
};
