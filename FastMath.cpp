#include "pch.h"
#include "FastMath.h"

//----------------------------------------------------------------------------------------------------------------------------------------
namespace
{
	//------------------------------------------------------------------------------------------------------------------------------------
	union INTOFLOAT
	{
		int			i;
		float		f;

		struct Bitfield    // as bit fields
		{
			unsigned int    sign:1;
			unsigned int    biasedexponent:8;
			unsigned int    significand;
		};

		//
		INTOFLOAT(const int _i)		: i(_i) { };
		INTOFLOAT(const float _f)	: f(_f) { };
	};

	//------------------------------------------------------------------------------------------------------------------------------------
	static const INTOFLOAT	g_posBias = (23 + 127) << 23;

	//------------------------------------------------------------------------------------------------------------------------------------
	static const INTOFLOAT	g_negBias = g_posBias.i + (1<<22);

	//------------------------------------------------------------------------------------------------------------------------------------
	static const float		g_SinTable[256] = 
	{
		0.000000f, 0.024575f, 0.049135f, 0.073666f, 0.098152f, 0.122579f, 0.146931f, 0.171195f, 0.195356f, 0.219399f, 0.243309f, 0.267072f, 0.290673f, 0.314100f, 0.337336f, 0.360369f, 
		0.383184f, 0.405767f, 0.428106f, 0.450186f, 0.471994f, 0.493517f, 0.514741f, 0.535655f, 0.556246f, 0.576500f, 0.596406f, 0.615952f, 0.635126f, 0.653916f, 0.672311f, 0.690300f, 
		0.707873f, 0.725017f, 0.741724f, 0.757982f, 0.773783f, 0.789117f, 0.803973f, 0.818344f, 0.832221f, 0.845595f, 0.858459f, 0.870804f, 0.882623f, 0.893908f, 0.904654f, 0.914853f, 
		0.924500f, 0.933589f, 0.942113f, 0.950068f, 0.957450f, 0.964253f, 0.970474f, 0.976108f, 0.981153f, 0.985606f, 0.989463f, 0.992722f, 0.995382f, 0.997440f, 0.998896f, 0.999749f, 
		0.999998f, 0.999642f, 0.998683f, 0.997121f, 0.994956f, 0.992191f, 0.988826f, 0.984864f, 0.980307f, 0.975158f, 0.969419f, 0.963096f, 0.956190f, 0.948707f, 0.940651f, 0.932027f, 
		0.922840f, 0.913095f, 0.902799f, 0.891957f, 0.880577f, 0.868665f, 0.856228f, 0.843274f, 0.829811f, 0.815846f, 0.801389f, 0.786447f, 0.771031f, 0.755148f, 0.738810f, 0.722025f, 
		0.704805f, 0.687158f, 0.669097f, 0.650631f, 0.631772f, 0.612532f, 0.592922f, 0.572953f, 0.552639f, 0.531991f, 0.511021f, 0.489743f, 0.468169f, 0.446312f, 0.424185f, 0.401803f, 
		0.379177f, 0.356323f, 0.333253f, 0.309982f, 0.286524f, 0.262893f, 0.239103f, 0.215168f, 0.191104f, 0.166924f, 0.142643f, 0.118276f, 0.093838f, 0.069343f, 0.044806f, 0.020242f, 
		-0.004334f, -0.028907f, -0.053463f, -0.077987f, -0.102464f, -0.126879f, -0.151217f, -0.175464f, -0.199604f, -0.223625f, -0.247510f, -0.271246f, -0.294817f, -0.318211f, -0.341413f, -0.364408f, 
		-0.387183f, -0.409725f, -0.432019f, -0.454051f, -0.475810f, -0.497281f, -0.518452f, -0.539310f, -0.559842f, -0.580036f, -0.599879f, -0.619360f, -0.638467f, -0.657189f, -0.675513f, -0.693429f, 
		-0.710927f, -0.727995f, -0.744623f, -0.760802f, -0.776521f, -0.791771f, -0.806543f, -0.820828f, -0.834616f, -0.847901f, -0.860673f, -0.872926f, -0.884652f, -0.895843f, -0.906492f, -0.916595f, 
		-0.926144f, -0.935133f, -0.943557f, -0.951412f, -0.958692f, -0.965392f, -0.971510f, -0.977041f, -0.981982f, -0.986329f, -0.990081f, -0.993235f, -0.995788f, -0.997741f, -0.999090f, -0.999837f, 
		-0.999979f, -0.999517f, -0.998452f, -0.996783f, -0.994512f, -0.991641f, -0.988171f, -0.984103f, -0.979442f, -0.974188f, -0.968347f, -0.961920f, -0.954912f, -0.947328f, -0.939171f, -0.930448f, 
		-0.921162f, -0.911319f, -0.900926f, -0.889989f, -0.878515f, -0.866510f, -0.853981f, -0.840937f, -0.827384f, -0.813332f, -0.798789f, -0.783763f, -0.768264f, -0.752300f, -0.735882f, -0.719020f, 
		-0.701724f, -0.684003f, -0.665870f, -0.647334f, -0.628407f, -0.609101f, -0.589426f, -0.569396f, -0.549022f, -0.528316f, -0.507291f, -0.485960f, -0.464335f, -0.442429f, -0.420257f, -0.397830f, 
		-0.375163f, -0.352270f, -0.329164f, -0.305859f, -0.282369f, -0.258709f, -0.234892f, -0.210934f, -0.186848f, -0.162649f, -0.138352f, -0.113972f, -0.089523f, -0.065019f, -0.040476f, -0.015909f, 
	};

	//------------------------------------------------------------------------------------------------------------------------------------
	static const float		g_FToIBias	= 12582912.0f;
	static const float		g_PI		= 3.14159625f;
	static const float		g_rcpScale	= 256.0f / (2.0f * g_PI);

	//------------------------------------------------------------------------------------------------------------------------------------
	static const unsigned int	g_SqrtTable[256] =
	{
		531980127, 532026288, 532072271, 532118079, 532163712, 532209174, 532254465, 532299589, 532344546, 532389339, 532433970, 532478440, 532522750, 532566903, 532610900, 532654744, 
		532698434, 532741974, 532785365, 532828607, 532871704, 532914655, 532957463, 533000129, 533042654, 533085041, 533127289, 533169401, 533211378, 533253220, 533294931, 533336509, 
		533377958, 533419278, 533460470, 533501535, 533542475, 533583291, 533623984, 533664554, 533705004, 533745334, 533785545, 533825638, 533865615, 533905476, 533945222, 533984855, 
		534024374, 534063782, 534103079, 534142267, 534181345, 534220315, 534259178, 534297934, 534336585, 534375132, 534413574, 534451914, 534490152, 534528288, 534566324, 534604260, 
		534642098, 534679837, 534717478, 534755023, 534792473, 534829827, 534867086, 534904252, 534941325, 534978305, 535015194, 535051992, 535088699, 535125317, 535161846, 535198287, 
		535234640, 535270905, 535307085, 535343178, 535379187, 535415110, 535450950, 535486706, 535522379, 535557970, 535593480, 535628908, 535664255, 535699523, 535734711, 535769820, 
		535804850, 535839803, 535874678, 535909476, 535944198, 535978844, 536013414, 536047910, 536082331, 536116678, 536150952, 536185153, 536219281, 536253337, 536287322, 536321235, 
		536355078, 536388850, 536422553, 536456186, 536489750, 536523246, 536556673, 536590033, 536623325, 536656551, 536689709, 536722802, 536755829, 536788791, 536821688, 536854520, 
		536887280, 536919921, 536952436, 536984827, 537017094, 537049241, 537081267, 537113174, 537144963, 537176637, 537208195, 537239640, 537270972, 537302193, 537333304, 537364306, 
		537395200, 537425987, 537456669, 537487246, 537517720, 537548091, 537578361, 537608530, 537638600, 537668572, 537698446, 537728224, 537757906, 537787493, 537816986, 537846387, 
		537875696, 537904913, 537934040, 537963078, 537992027, 538020888, 538049662, 538078350, 538106952, 538135470, 538163903, 538192254, 538220521, 538248707, 538276812, 538304837, 
		538332781, 538360647, 538388434, 538416144, 538443776, 538471332, 538498812, 538526217, 538553548, 538580804, 538607987, 538635097, 538662136, 538689102, 538715997, 538742822, 
		538769577, 538796263, 538822880, 538849428, 538875909, 538902322, 538928668, 538954949, 538981163, 539007312, 539033396, 539059416, 539085373, 539111265, 539137095, 539162863, 
		539188568, 539214212, 539239794, 539265316, 539290778, 539316180, 539341522, 539366806, 539392031, 539417197, 539442306, 539467358, 539492352, 539517290, 539542171, 539566997, 
		539591768, 539616483, 539641143, 539665749, 539690301, 539714800, 539739245, 539763637, 539787976, 539812264, 539836499, 539860682, 539884815, 539908896, 539932927, 539956907, 
		539980838, 540004718, 540028549, 540052332, 540076065, 540099750, 540123387, 540146976, 540170517, 540194011, 540217458, 540240858, 540264211, 540287519, 540310780, 540333996, 
	};

	//------------------------------------------------------------------------------------------------------------------------------------
	static const float		g_Deg2Rad = 3.14159265358979323846f / 180.0f;
}

//------------------------------------------------------------------------------------------------------------------------------------
const float FastMath::EPSILON = 1e-6f;

//------------------------------------------------------------------------------------------------------------------------------------
int FastMath::FloatToInt(const float _f)
{
	INTOFLOAT n(_f);

	const INTOFLOAT& bias = _f >= 0 ? g_posBias : g_negBias;

	n.f += bias.f;
	n.i	-= bias.i;

	return n.i;
}

//------------------------------------------------------------------------------------------------------------------------------------
float FastMath::IntToFloat(const int _i)
{
	return static_cast<float>(_i);
}

//------------------------------------------------------------------------------------------------------------------------------------
float FastMath::Sign(const float _f)
{
	INTOFLOAT n(_f);

	if ( n.i > 0 )
	{
		return 1.0f;
	}
	else if ( n.i < 0 )
	{
		return -1.0f;
	}
	return 0.0f;
}

//------------------------------------------------------------------------------------------------------------------------------------
int FastMath::Compare(const float _f, const float _g)
{
	INTOFLOAT f(_f),g(_g);

	if ( f.i > g.i )
	{
		return -1;
	}
	else if ( f.i < g.i )
	{
		return 1;
	}
	return 0;
}

//------------------------------------------------------------------------------------------------------------------------------------
float FastMath::Saturate(const float _f)
{
	INTOFLOAT f(_f);

	if ( _f < 0 )
	{
		int s = ~(f.i >> 31);

		f.i &= s;
	
		return f.f;
	}
	else if ( _f > 1 )
	{
		f.f -= 1.0f;
		
		int s = ~(f.i >> 31);
		f.i &= s;
		
		return 1.0f + f.f;
	}
	else
	{
		return _f;
	}
}

//------------------------------------------------------------------------------------------------------------------------------------
float FastMath::Abs(const float _f)
{
	INTOFLOAT f(_f);
	
	f.i &= 0x7fffffff;
	
	return f.f;
}

//------------------------------------------------------------------------------------------------------------------------------------
float FastMath::Sqrt(const float _f)
{
	INTOFLOAT f(_f);

	unsigned int n = f.i;
	unsigned int e = (n >> 1) & 0x3f800000;
	
	n = (n >> 16) & 0xff;
	
	f.i = g_SqrtTable[n] + e;

	return f.f;
}

//------------------------------------------------------------------------------------------------------------------------------------
float FastMath::Log(const float _f)
{
	return static_cast<float>(log(_f));
}

//------------------------------------------------------------------------------------------------------------------------------------
float FastMath::Sin(const float _radians)
{
	INTOFLOAT f(_radians);

	f.f = _radians * g_rcpScale + g_FToIBias;

	return g_SinTable[f.i & 255];
}

//------------------------------------------------------------------------------------------------------------------------------------
float FastMath::Cos(const float _radians)
{
	INTOFLOAT f(_radians);

	f.f = _radians * g_rcpScale + g_FToIBias + 64.0f;

	return g_SinTable[f.i & 255];
}

//------------------------------------------------------------------------------------------------------------------------------------
float FastMath::Tan(const float _radians)
{
	return Sin(_radians) / Cos(_radians);
}

//------------------------------------------------------------------------------------------------------------------------------------
float FastMath::Deg2Rad(const float _degree)
{
	return _degree * g_Deg2Rad;
}

//------------------------------------------------------------------------------------------------------------------------------------
float FastMath::RandomValue(unsigned int& _state)
{
	_state = _state * 747769405 + 2891336453;
	unsigned int result = ((_state >> ((_state >> 28) + 4)) ^ _state) * 277803737;
	result = (result >> 22) ^ result;
	return static_cast<float>(result) / 4294967295.0f;
}

//------------------------------------------------------------------------------------------------------------------------------------
float FastMath::RandomValueNormalDistribution(unsigned int& _state)
{
	float theta = 2.0f * 3.1415296f * RandomValue(_state);
	float rho = Sqrt(-2.0f * Log(RandomValue(_state)));
	return rho * Cos(theta);
}

//------------------------------------------------------------------------------------------------------------------------------------
float FastMath::SmwoothStep(float a, float b, float t)
{
	if (t < a) return 0;
	if (t >= b) return 1;
	float x = (t - a) / (b - a);
	return x * x * (3.0f - 2.0f * x);
}

//------------------------------------------------------------------------------------------------------------------------------------
float FastMath::Min(float a, float b)
{
	return a < b ? a : b;
}

//------------------------------------------------------------------------------------------------------------------------------------
float FastMath::Max(float a, float b)
{
	return a > b ? a : b;
}

//------------------------------------------------------------------------------------------------------------------------------------
DirectX::SimpleMath::Vector3 FastMath::RandomDirection(unsigned int& _state)
{
	DirectX::SimpleMath::Vector3 v;
	v.x = 2.0f * RandomValue(_state) - 1.0f;
	v.y = 2.0f * RandomValue(_state) - 1.0f;
	v.z = 2.0f * RandomValue(_state) - 1.0f;
	v.Normalize();
	return v;
}

//------------------------------------------------------------------------------------------------------------------------------------
DirectX::SimpleMath::Vector3 FastMath::RandomDirectionInHemisphere(const DirectX::SimpleMath:: Vector3& _normal, unsigned int& _state)
{
	DirectX::SimpleMath::Vector3 v = RandomDirection(_state);
	if (v.Dot(_normal) < 0)
	{
		v = -v;
	}
	return v;
}